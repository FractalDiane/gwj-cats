[gd_scene load_steps=8 format=3 uid="uid://ba7ywxh0mgexs"]

[ext_resource type="PackedScene" uid="uid://dmnk2nko6unu3" path="res://meshes/hanging_plant.glb" id="1_qb1e3"]
[ext_resource type="PackedScene" uid="uid://b6120kuynkwk2" path="res://meshes/cat.glb" id="2_8u44m"]
[ext_resource type="PackedScene" uid="uid://dlrdmtqyyn0qb" path="res://meshes/main_size_reference.glb" id="3_83dx8"]

[sub_resource type="Environment" id="Environment_tsshv"]
background_mode = 1
background_color = Color(0.890196, 0.67451, 0.603922, 1)
ambient_light_source = 2
ambient_light_color = Color(0.890196, 0.67451, 0.603922, 1)
reflected_light_source = 2
tonemap_mode = 2
ssao_enabled = true
ssao_radius = 0.78
ssao_intensity = 0.67
ssao_power = 2.7991
ssil_enabled = true
ssil_radius = 0.54
ssil_intensity = 1.44
ssil_sharpness = 1.0
volumetric_fog_enabled = true
volumetric_fog_density = 0.1
volumetric_fog_albedo = Color(0.819608, 0.772549, 0.784314, 1)
volumetric_fog_emission = Color(0.419608, 0.223529, 0.392157, 1)
volumetric_fog_anisotropy = 0.4

[sub_resource type="Shader" id="Shader_8qn7n"]
code = "// Sobel Edge Detection Shader written by absentSpaghetti
//
// This shader is a part of my tutorial/learning Github repository: https://github.com/absentSpaghetti/Shader-Basics-With-Spaghetti
// Feel free to use, edit and share this shader according to your needs
//
// MIT License 
//
// prerequisites: color-to-greyscale, simple-box-blur

shader_type spatial;
render_mode unshaded, cull_disabled;

uniform sampler2D screen_texture : hint_screen_texture, filter_linear_mipmap;
uniform float min_step : hint_range(0.0, 1.0, 0.01) = 0.4; // min step for the smoothstep() function
uniform float max_step : hint_range(0.0, 1.0, 0.01) = 0.6; // max step for the smoothstep() function

// x direction kernel
const mat3 kx = mat3(
	vec3(-1, 0, 1),
	vec3(-2, 0, 2),
	vec3(-1, 0, 1)
);
// y direction kernel 
const mat3 ky = mat3(
	vec3(-1, -2, -1),
	vec3(0, 0, 0),
	vec3(1, 2, 1)
);

// By using a different set of kernels we can get different results. This is a kernel for the laplace operator
//// x direction kernel
//const mat3 kx = mat3(
//	vec3(0, -1, 0),
//	vec3(-1, 4, -1),
//	vec3(-0, -1, 0)
//);
//// y direction kernel 
//const mat3 ky = mat3(
//	vec3(-1, -1, -1),
//	vec3(-1, 8, -1),
//	vec3(-1, -1, -1)
//);

void vertex() { 
	POSITION = vec4(VERTEX, 1.0);
}

void fragment() { 
	
	vec4 texture_color = texture(screen_texture, SCREEN_UV);
	
	mat3 I; // Matrix is essentially an array of vectors (in this case vector3s)
	for (int i = 0; i < 3; i++ ) {
		for (int j = 0; j < 3; j++) {
			vec3 sample_around_pixel = texelFetch(screen_texture, ivec2(FRAGCOORD.xy) + ivec2(i-1,j-1), 0).rgb;
			vec3 sample_grey = vec3(sample_around_pixel.r * 0.3, sample_around_pixel.g * 0.59, sample_around_pixel.b * 0.11);
			I[i][j] = sample_grey.r + sample_grey.g + sample_grey.b;
			
		}
	}
	
	// apply the sobel operator
	float gx = dot(kx[0], I[0]) + dot(kx[1], I[1]) + dot(kx[2], I[2]); // convolution of the image's and intensity's 'x' values
	float gy = dot(ky[0], I[0]) + dot(ky[1], I[1]) + dot(ky[2], I[2]); // convolution of the image's and intensity's 'y' values
	float g = sqrt(pow(gx, 2.0) + pow(gy, 2.0)); // combine x and y of the sobel and get rid of negative values
	
	
	// strength of the effect;
	g = smoothstep(min_step, max_step, g); // smoothstep() smooths out a value over a curve if it is within min and max steps. Otherwise, it returns 0 (if smaller than min_step) and 1 (if bigger than max_step)
	
	ALBEDO = texture_color.rgb - vec3(g);
	
//	//color + sobel edge detection
//	ALBEDO = texture_color.rgb * vec3(g);
	
//	//debug, uncomment to return to the screen_texture color
//	ALBEDO = texture_color.rgb;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_y18s4"]
render_priority = -1
shader = SubResource("Shader_8qn7n")
shader_parameter/min_step = 0.13
shader_parameter/max_step = 1.0

[sub_resource type="QuadMesh" id="QuadMesh_1k5td"]
size = Vector2(2, 2)

[node name="Node3D" type="Node3D"]

[node name="hanging_plant" parent="." instance=ExtResource("1_qb1e3")]
transform = Transform3D(-3.72629e-08, 0, -0.852476, 0, 0.852476, 0, 0.852476, 0, -3.72629e-08, 3.28809, 2.78208, -1.70461)

[node name="hanging_plant2" parent="." instance=ExtResource("1_qb1e3")]
transform = Transform3D(-3.72629e-08, 0, -0.852476, 0, 0.852476, 0, 0.852476, 0, -3.72629e-08, -3.19264, 2.78208, -1.70461)

[node name="cat" parent="." instance=ExtResource("2_8u44m")]
transform = Transform3D(0.483481, 0, -0.875355, 0, 1, 0, 0.875355, 0, 0.483481, 0, 0.75, 0)

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_tsshv")

[node name="MeshInstance3D9" type="MeshInstance3D" parent="."]
transform = Transform3D(-2.66529e-07, 0, -1, 0, 2.13918, 0, 6.09747, 0, -4.37114e-08, -1.47562, 0, 0)
visible = false
material_override = SubResource("ShaderMaterial_y18s4")
mesh = SubResource("QuadMesh_1k5td")

[node name="main_size_reference" parent="." instance=ExtResource("3_83dx8")]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0.00826111, -0.840425, -0.650998)

[node name="PlayerCamera" type="Camera3D" parent="."]
transform = Transform3D(0.999976, 0.00550131, -0.00429809, 0, 0.615661, 0.78801, 0.00698126, -0.787991, 0.615646, -0.0534222, 4.91945, 3.92424)
